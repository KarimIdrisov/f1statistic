[{"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\index.tsx":"1","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\App.tsx":"2","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\HomePage.tsx":"3","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Layout.tsx":"4","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Navbar.tsx":"5","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\HomeMain.tsx":"6","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Footer.tsx":"7","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Utils\\FetchRequest.tsx":"8","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\StandingList.tsx":"9","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\StandingListMain.tsx":"10","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\DriverPage.tsx":"11","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\DriverPageMain.tsx":"12","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\ConstructorPage.tsx":"13","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\ConstructorPageMain.tsx":"14","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\CurrentRaceSchedule.tsx":"15","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\CurrentRaceScheduleMain.tsx":"16","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\ConstructorsCup.tsx":"17","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\ConstructorsCupMain.tsx":"18","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\RaceResults.tsx":"19","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\RaceResultsMain.tsx":"20"},{"size":218,"mtime":1610935307467,"results":"21","hashOfConfig":"22"},{"size":1144,"mtime":1611276735108,"results":"23","hashOfConfig":"22"},{"size":514,"mtime":1611360913570,"results":"24","hashOfConfig":"22"},{"size":621,"mtime":1611022609008,"results":"25","hashOfConfig":"22"},{"size":2880,"mtime":1611360913544,"results":"26","hashOfConfig":"22"},{"size":12680,"mtime":1611360913606,"results":"27","hashOfConfig":"22"},{"size":1063,"mtime":1611360913473,"results":"28","hashOfConfig":"22"},{"size":455,"mtime":1610887733036,"results":"29","hashOfConfig":"22"},{"size":725,"mtime":1611275199256,"results":"30","hashOfConfig":"22"},{"size":3396,"mtime":1611276595486,"results":"31","hashOfConfig":"22"},{"size":610,"mtime":1611022830848,"results":"32","hashOfConfig":"22"},{"size":4897,"mtime":1611222548936,"results":"33","hashOfConfig":"22"},{"size":621,"mtime":1611023604627,"results":"34","hashOfConfig":"22"},{"size":4340,"mtime":1611284357227,"results":"35","hashOfConfig":"22"},{"size":513,"mtime":1611222033643,"results":"36","hashOfConfig":"22"},{"size":3161,"mtime":1611284456968,"results":"37","hashOfConfig":"22"},{"size":523,"mtime":1611275611207,"results":"38","hashOfConfig":"22"},{"size":3550,"mtime":1611282550073,"results":"39","hashOfConfig":"22"},{"size":572,"mtime":1611282670259,"results":"40","hashOfConfig":"22"},{"size":4264,"mtime":1611284397117,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"yufx2",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\index.tsx",[],["86","87"],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\App.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\HomePage.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Layout.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Navbar.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\HomeMain.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\Footer.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Utils\\FetchRequest.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\StandingList.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\StandingListMain.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\DriverPage.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\DriverPageMain.tsx",["88"],"import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n    Card,\r\n    Chip,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport FetchRequest from \"../Utils/FetchRequest\";\r\nimport LocalLibraryIcon from \"@material-ui/icons/LocalLibrary\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        margin: '80px 20px 60px 20px'\r\n    },\r\n    card: {\r\n        width: 300,\r\n        padding: 30,\r\n        height: 300\r\n    },\r\n    table: {\r\n        width: 500,\r\n        marginLeft: 30,\r\n    }\r\n}))\r\n\r\ninterface IConstructor {\r\n    constructorId: string,\r\n    name: string,\r\n    nationality: string,\r\n    url: string,\r\n}\r\n\r\nexport default function DriverPageMain(props: {\r\n    driver: string;\r\n}) {\r\n    const classes = useStyles()\r\n    const [driver, setDriver] = useState({\r\n        code: '',\r\n        dateOfBirth: '',\r\n        familyName: '',\r\n        givenName: '',\r\n        nationality: '',\r\n        permanentNumber: '',\r\n        url: '',\r\n    })\r\n    const [constructors, setConstructors] = useState([])\r\n    useEffect(() => {\r\n        async function getDriver() {\r\n            const response = await FetchRequest('drivers/' + props.driver)\r\n            setDriver({\r\n                code: response.MRData.DriverTable.Drivers[0].code,\r\n                dateOfBirth: response.MRData.DriverTable.Drivers[0].dateOfBirth,\r\n                familyName: response.MRData.DriverTable.Drivers[0].familyName,\r\n                givenName: response.MRData.DriverTable.Drivers[0].givenName,\r\n                nationality: response.MRData.DriverTable.Drivers[0].nationality,\r\n                permanentNumber: response.MRData.DriverTable.Drivers[0].permanentNumber,\r\n                url: response.MRData.DriverTable.Drivers[0].url,\r\n            })\r\n        }\r\n\r\n        async function getTeams() {\r\n            const response = await FetchRequest('drivers/' + props.driver + '/constructors')\r\n            setConstructors(response.MRData.ConstructorTable.Constructors)\r\n        }\r\n\r\n        getDriver()\r\n        getTeams()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card}>\r\n                <Typography variant='h5'>{driver.givenName + ' ' + driver.familyName}</Typography>\r\n                <Typography>Дата рождения: {driver.dateOfBirth}</Typography>\r\n                {driver.code ? <Typography>Код: {driver.code}</Typography> : <></>}\r\n                <Typography>Национальность: {driver.nationality}</Typography>\r\n                {driver.permanentNumber ? <Typography>Код: {driver.permanentNumber}</Typography> : <></>}\r\n                <a href={driver.url} target={'_blank'} rel=\"noopener noreferrer\"\r\n                   style={{textDecoration: 'none', marginLeft: 3}}>\r\n                    <Chip variant=\"outlined\" size={\"small\"} label={'Wiki'}\r\n                          icon={<LocalLibraryIcon/>} clickable={true}/>\r\n                </a>\r\n            </Card>\r\n            <TableContainer className={classes.table}>\r\n                <Typography variant='h5'>Команды гонщика</Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Имя команды</TableCell>\r\n                            <TableCell>Национальность</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {constructors.map((constructor: IConstructor, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>\r\n                                    <Link to={'/constructors/' + constructor.constructorId}\r\n                                          style={{textDecoration: 'none', color: '#000000'}}>\r\n                                        {constructor.name}\r\n                                    </Link>\r\n                                    <a href={constructor.url} target={'_blank'} rel=\"noopener noreferrer\"\r\n                                       style={{textDecoration: 'none', marginLeft: 3}}>\r\n                                        <Chip variant=\"outlined\" size={\"small\"} label={'Wiki'}\r\n                                              icon={<LocalLibraryIcon/>} clickable={true}/>\r\n                                    </a>\r\n                                </TableCell>\r\n                                <TableCell>{constructor.nationality}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\ConstructorPage.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\ConstructorPageMain.tsx",["89"],"import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FetchRequest from \"../Utils/FetchRequest\";\r\nimport {\r\n    Card,\r\n    Chip,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport LocalLibraryIcon from \"@material-ui/icons/LocalLibrary\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        margin: '80px 20px 60px 20px'\r\n    },\r\n    card: {\r\n        width: 300,\r\n        padding: 30,\r\n        height: 300\r\n    },\r\n    table: {\r\n        paddingBottom: 76,\r\n        width: 500,\r\n        marginLeft: 30,\r\n    }\r\n}))\r\n\r\ninterface IDriver {\r\n    driverId: string,\r\n    code: string,\r\n    dateOfBirth: string,\r\n    familyName: string,\r\n    givenName: string,\r\n    nationality: string,\r\n    permanentNumber: string,\r\n    url: string,\r\n}\r\n\r\nexport default function ConstructorPageMain(props: {\r\n    constructor: string\r\n}) {\r\n    const classes = useStyles()\r\n    const [constructor, setConstructor] = useState({\r\n        name: '',\r\n        nationality: '',\r\n        url: '',\r\n    })\r\n    const [drivers, setDrivers] = useState([])\r\n    useEffect(() => {\r\n        async function getConstructor() {\r\n            const response = await FetchRequest('constructors/' + props.constructor)\r\n            setConstructor({\r\n                name: response.MRData.ConstructorTable.Constructors[0].name,\r\n                nationality: response.MRData.ConstructorTable.Constructors[0].nationality,\r\n                url: response.MRData.ConstructorTable.Constructors[0].url\r\n            })\r\n        }\r\n\r\n        async function getDrivers() {\r\n            const response = await FetchRequest('constructors/' + props.constructor + '/drivers')\r\n            setDrivers(response.MRData.DriverTable.Drivers.slice(0, 10))\r\n        }\r\n\r\n        getConstructor()\r\n        getDrivers()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card}>\r\n                <Typography variant='h5'>{constructor.name}</Typography>\r\n                <Typography>Национальность: {constructor.nationality}</Typography>\r\n                <a href={constructor.url} target={'_blank'} rel=\"noopener noreferrer\"\r\n                   style={{textDecoration: 'none', marginLeft: 3}}>\r\n                    <Chip variant=\"outlined\" size={\"small\"} label={'Wiki'}\r\n                          icon={<LocalLibraryIcon/>} clickable={true}/>\r\n                </a>\r\n            </Card>\r\n            <TableContainer className={classes.table}>\r\n                <Typography variant='h5'>Гонщики команды</Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Имя гонщика</TableCell>\r\n                            <TableCell>Национальность</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {drivers.map((driver: IDriver, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>\r\n                                    <Link to={'/driver/' + driver.driverId}\r\n                                          style={{textDecoration: 'none', color: '#000000'}}>\r\n                                        {driver.givenName + ' ' + driver.familyName}\r\n                                    </Link>\r\n                                    <a href={constructor.url} target={'_blank'} rel=\"noopener noreferrer\"\r\n                                       style={{textDecoration: 'none', marginLeft: 3}}>\r\n                                        <Chip variant=\"outlined\" size={\"small\"} label={'Wiki'}\r\n                                              icon={<LocalLibraryIcon/>} clickable={true}/>\r\n                                    </a>\r\n                                </TableCell>\r\n                                <TableCell>{driver.nationality}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n};\r\n","C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\CurrentRaceSchedule.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\CurrentRaceScheduleMain.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\ConstructorsCup.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\ConstructorsCupMain.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Pages\\RaceResults.tsx",[],"C:\\Users\\karim\\WebstormProjects\\f1statistic\\src\\Layout\\RaceResultsMain.tsx",["90"],"import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FetchRequest from \"../Utils/FetchRequest\";\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        margin: '80px 20px 60px 20px'\r\n    },\r\n    table: {\r\n        paddingBottom: 76,\r\n        margin: '30px',\r\n    }\r\n}))\r\n\r\ninterface IConstructor {\r\n    constructorId: string,\r\n    name: string,\r\n}\r\n\r\ninterface IDriver {\r\n    driverId: string,\r\n    permanentNumber: string,\r\n    familyName: string,\r\n    givenName: string,\r\n}\r\n\r\ninterface ITime {\r\n    time: string\r\n}\r\n\r\ninterface IResult {\r\n    Constructor: IConstructor,\r\n    Driver: IDriver,\r\n    Time: ITime,\r\n    grid: string,\r\n    laps: string,\r\n    points: string,\r\n    position: string,\r\n    status: string\r\n}\r\n\r\nexport default function RaceResultsMain(props: {\r\n    round: string\r\n}) {\r\n    const classes = useStyles()\r\n    const [results, setResults] = useState([])\r\n    useEffect(() => {\r\n        async function getRaceResults() {\r\n            const response = await FetchRequest('current/' + props.round + '/results')\r\n            console.log(response.MRData.RaceTable.Races[0].Results)\r\n            setResults(response.MRData.RaceTable.Races[0].Results)\r\n        }\r\n\r\n        getRaceResults()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TableContainer className={classes.table}>\r\n                <Typography variant='h5'>Результаты гонки</Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Позиция</TableCell>\r\n                            <TableCell>NO</TableCell>\r\n                            <TableCell>Гонщик</TableCell>\r\n                            <TableCell>Команда</TableCell>\r\n                            <TableCell>Круги</TableCell>\r\n                            <TableCell>Позиция старта</TableCell>\r\n                            <TableCell>Время</TableCell>\r\n                            <TableCell>Статус</TableCell>\r\n                            <TableCell>Очки</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {results.map((result: IResult, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{result.position}</TableCell>\r\n                                <TableCell>{result.Driver.permanentNumber}</TableCell>\r\n                                <TableCell>\r\n                                    <Link to={'/driver/' + result.Driver.driverId}\r\n                                          style={{textDecoration: 'none', color: '#000000'}}>\r\n                                        {result.Driver.givenName + ' ' + result.Driver.familyName}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Link to={'/constructors/' + result.Constructor.constructorId}\r\n                                          style={{textDecoration: 'none', color: '#000000'}}>\r\n                                        {result.Constructor.name}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell>{result.laps}</TableCell>\r\n                                <TableCell>{result.grid}</TableCell>\r\n                                <TableCell>{result.Time !== undefined ? (\r\n                                    result.Time.time\r\n                                ) : (\r\n                                    0\r\n                                )}</TableCell>\r\n                                <TableCell>{result.status}</TableCell>\r\n                                <TableCell>{result.points}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n};\r\n",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":77,"column":8,"nodeType":"97","endLine":77,"endColumn":10,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":74,"column":8,"nodeType":"97","endLine":74,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":58,"column":8,"nodeType":"97","endLine":58,"endColumn":10,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.driver'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useEffect has a missing dependency: 'props.constructor'. Either include it or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'props.round'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [props.driver]",{"range":"114","text":"115"},"Update the dependencies array to be: [props.constructor]",{"range":"116","text":"117"},"Update the dependencies array to be: [props.round]",{"range":"118","text":"119"},[2256,2258],"[props.driver]",[2014,2016],"[props.constructor]",[1454,1456],"[props.round]"]